/// Provides for minimal identification of C++ standard items.
/// For example - the set of standard system headers is made available.
part of ebisu_cpp.ebisu_cpp;

// custom <part cpp_standard>

const _systemHeaders = const [
  'algorithm',
  'array',
  'atomic',
  'bitset',
  'cassert',
  'ccomplex',
  'cctype',
  'cerrno',
  'cfenv',
  'cfloat',
  'chrono',
  'cinttypes',
  'ciso646',
  'climits',
  'clocale',
  'cmath',
  'codecvt',
  'complex',
  'condition_variable',
  'csetjmp',
  'csignal',
  'cstdalign',
  'cstdarg',
  'cstdbool',
  'cstddef',
  'cstdint',
  'cstdio',
  'cstdlib',
  'cstring',
  'ctgmath',
  'ctime',
  'cuchar',
  'cwchar',
  'cwctype',
  'deque',
  'exception',
  'forward_list',
  'fstream',
  'functional',
  'future',
  'initializer_list',
  'iomanip',
  'ios',
  'iosfwd',
  'iostream',
  'istream',
  'iterator',
  'limits',
  'list',
  'locale',
  'map',
  'memory',
  'mutex',
  'new',
  'numeric',
  'ostream',
  'queue',
  'random',
  'ratio',
  'regex',
  'scoped_allocator',
  'set',
  'shared_mutex',
  'sstream',
  'stack',
  'stdexcept',
  'streambuf',
  'string',
  'strstream',
  'system_error',
  'thread',
  'tuple',
  'type_traits',
  'typeindex',
  'typeinfo',
  'unordered_map',
  'unordered_set',
  'utility',
  'valarray',
  'vector',
];

const _posixHeaders = const [
  'aio.h',
  'arpa/inet.h',
  'assert.h',
  'complex.h',
  'cpio.h',
  'ctype.h',
  'dirent.h',
  'dlfcn.h',
  'errno.h',
  'fcntl.h',
  'fenv.h',
  'float.h',
  'fmtmsg.h',
  'fnmatch.h',
  'ftw.h',
  'glob.h',
  'grp.h',
  'iconv.h',
  'inttypes.h',
  'iso646.h',
  'langinfo.h',
  'libgen.h',
  'limits.h',
  'locale.h',
  'math.h',
  'monetary.h',
  'mqueue.h',
  'ndbm.h',
  'net/if.h',
  'netdb.h',
  'netinet/in.h',
  'netinet/tcp.h',
  'nl_types.h',
  'poll.h',
  'pthread.h',
  'pwd.h',
  'regex.h',
  'sched.h',
  'search.h',
  'semaphore.h',
  'setjmp.h',
  'signal.h',
  'spawn.h',
  'stdarg.h',
  'stdbool.h',
  'stddef.h',
  'stdint.h',
  'stdio.h',
  'stdlib.h',
  'string.h',
  'strings.h',
  'stropts.h',
  'sys/ipc.h',
  'sys/mman.h',
  'sys/msg.h',
  'sys/resource.h',
  'sys/select.h',
  'sys/sem.h',
  'sys/shm.h',
  'sys/socket.h',
  'sys/stat.h',
  'sys/statvfs.h',
  'sys/time.h',
  'sys/times.h',
  'sys/types.h',
  'sys/uio.h',
  'sys/un.h',
  'sys/utsname.h',
  'sys/wait.h',
  'syslog.h',
  'tar.h',
  'termios.h',
  'tgmath.h',
  'time.h',
  'trace.h',
  'ulimit.h',
  'unistd.h',
  'utime.h',
  'utmpx.h',
  'wchar.h',
  'wctype.h',
  'wordexp.h',
];

const _linuxHeaders = const ['sys/prctl.h',];

/// Returns true if [h] is system header
bool isSystemHeader(String h) =>
    _systemHeaders.contains(h) ||
    _posixHeaders.contains(h) ||
    _linuxHeaders.contains(h);

/// Returns [original] as a C++ string literal
///
///    print("std::string x = ${cppStringLit('''
///    This is a test
///    Of the emergency
///    ''')};");
///
/// prints:
///
///    std::string x = "This is a test\n"
///    "Of the emergency\n"
///    "\n";
String cppStringLit(String original) =>
    original.split('\n').map((l) => '"$l\\n"').join('\n');

// end <part cpp_standard>
